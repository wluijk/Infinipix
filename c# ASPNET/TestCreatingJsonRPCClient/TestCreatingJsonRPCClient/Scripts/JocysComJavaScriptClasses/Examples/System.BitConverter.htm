<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<meta http-equiv="Pragma" content="no-cache" />
	<meta http-equiv="Expires" content="-1" />
	<title>System.BitConverter</title>
	<link type="text/css" rel="stylesheet" href="../System.Web.UI.Interface.debug.css" />
	<link rel="stylesheet" type="text/css" href="Styles/Default.css" />

	<script type="text/javascript" src="../System.debug.js"></script>

	<script type="text/javascript" src="../System.Text.debug.js"></script>

	<script type="text/javascript" src="../System.Collections.debug.js"></script>

	<script type="text/javascript" src="../System.BitConverter.debug.js"></script>

	<script type="text/javascript" src="Scripts/LogFunctions.debug.js"></script>

	<script type="text/javascript">
		// You can remove Trace.Write lines.

		function WriteLog(text) {
			Trace.Write("<code>" + text + "</code>");
		}

		function Window_Load() {
			Trace.IsEnabled = true;
			WriteLog("// Start 'System.BitConverter' Demo");
			WriteLog("BitConverter.IsLittleEndian = " + System.BitConverter.IsLittleEndian);
			var bytes, str;
			// ================================================
			WriteLog("// === Test Double:");
			var n64 = -1.5;
			WriteLog("var n64 = " + n64 + ";");
			bytes = System.BitConverter.GetBytes(n64, System.TypeCode.Double);
			str = System.BitConverter.ToString(bytes);
			n64 = System.BitConverter.ToDouble(bytes, 0);
			WriteLog("bytes = System.BitConverter.GetBytes(n64, System.TypeCode.Double);");
			WriteLog("str = System.BitConverter.ToString(bytes); // str = " + str + "");
			WriteLog("n64 = System.BitConverter.ToDouble(bytes, 0); // n64 = " + n64);
			// ================================================
			WriteLog("// === Test Single:");
			var n32 = -1.5;
			WriteLog("var n32 = " + n32 + ";");
			bytes = System.BitConverter.GetBytes(n32, System.TypeCode.Single);
			str = System.BitConverter.ToString(bytes);
			n32 = System.BitConverter.ToSingle(bytes, 0);
			WriteLog("bytes = System.BitConverter.GetBytes(n32, System.TypeCode.Single);");
			WriteLog("str = System.BitConverter.ToString(bytes); // str = " + str + "");
			WriteLog("n32 = System.BitConverter.ToSingle(bytes, 0); // n32 = " + n32);
			// ================================================
			WriteLog("// === Test Boolean:");
			var bl1 = true;
			WriteLog("var bl1 = " + bl1 + ";");
			bytes = System.BitConverter.GetBytes(bl1, System.TypeCode.Boolean);
			str = System.BitConverter.ToString(bytes);
			bl1 = System.BitConverter.ToBoolean(bytes, 0);
			WriteLog("bytes = System.BitConverter.GetBytes(bl1, System.TypeCode.Boolean);");
			WriteLog("str = System.BitConverter.ToString(bytes); // str = " + str + "");
			WriteLog("bl1 = System.BitConverter.ToBoolean(bytes, 0); // bl1 = " + bl1);
			// ================================================
			WriteLog("// === Test Int16:");
			var i16 = -13312;
			WriteLog("var i16 = " + i16 + ";");
			bytes = System.BitConverter.GetBytes(i16, System.TypeCode.Int16);
			str = System.BitConverter.ToString(bytes);
			i16 = System.BitConverter.ToInt16(bytes, 0);
			WriteLog("bytes = System.BitConverter.GetBytes(i16, System.TypeCode.Int16);");
			WriteLog("str = System.BitConverter.ToString(bytes); // str = " + str + "");
			WriteLog("i16 = System.BitConverter.ToInt16(bytes, 0); // i16 = " + i16);
			// ================================================
			WriteLog("// === Test UInt16:");
			var u16 = 52224;
			WriteLog("var u16 = " + u16 + ";");
			bytes = System.BitConverter.GetBytes(u16, System.TypeCode.UInt16);
			str = System.BitConverter.ToString(bytes);
			u16 = System.BitConverter.ToUInt16(bytes, 0);
			WriteLog("bytes = System.BitConverter.GetBytes(u16, System.TypeCode.UInt16);");
			WriteLog("str = System.BitConverter.ToString(bytes); // str = " + str + "");
			WriteLog("u16 = System.BitConverter.ToUInt16(bytes, 0); // u16 = " + u16);
			// ================================================
			WriteLog("// === Test Int32:");
			var i32 = -859045888;
			WriteLog("var i32 = " + i32 + ";");
			bytes = System.BitConverter.GetBytes(i32, System.TypeCode.Int32);
			str = System.BitConverter.ToString(bytes);
			i32 = System.BitConverter.ToInt32(bytes, 0);
			WriteLog("bytes = System.BitConverter.GetBytes(i32, System.TypeCode.Int32);");
			WriteLog("str = System.BitConverter.ToString(bytes); // str = " + str + "");
			WriteLog("i32 = System.BitConverter.ToInt32(bytes, 0); // i32 = " + i32);
			// ================================================
			WriteLog("// === Test UInt32:");
			var u32 = 3435921408;
			WriteLog("var u32 = " + u32 + ";");
			bytes = System.BitConverter.GetBytes(u32, System.TypeCode.UInt32);
			str = System.BitConverter.ToString(bytes);
			u32 = System.BitConverter.ToUInt32(bytes, 0);
			WriteLog("bytes = System.BitConverter.GetBytes(u32, System.TypeCode.UInt32);");
			WriteLog("str = System.BitConverter.ToString(bytes); // str = " + str + "");
			WriteLog("u32 = System.BitConverter.ToUInt32(bytes, 0); // u32 = " + u32);
		}

		window.onload = Window_Load

	</script>

</head>
<body>
	<p>
		http://en.wikipedia.org/wiki/Endianness
	</p>
	<p>
		Big-endian order - highest order (big) numbers coming first. For example whole numbers
		in English language. For example, the number 834 signifies 8 hundreds (10^2), 3
		tens (10^1) and 4 'single numbers' (10^0).
	</p>
	<p>
		Little-endian order - lowest order (little) numbers coming first. For example date
		in format 'dd/mm/yyyy'. Of course any date can by converted into a number an be
		written in Big-endian order in English language.
	</p>
	<p>
		All numbers in javascript are stored as 64-bit (8 bytes) float point number (double:
		1-bit sign, 11-bits exponent, 52-bits mantissa). This means that we can use/store
		integers with 52 bits in size and perform +/-arithmetic on integers (whole numbers)
		which use no more than 51 bits.
	</p>
	<div id="TraceLog" style="width: 100%; height: 400px;"></div>
</body>
</html>
